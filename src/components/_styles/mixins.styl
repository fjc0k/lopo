@require './variables';

// 字符串宽度溢出显示省略号
ellipsis($line = 1) {
  if $line == 1 {
    width: auto;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    word-wrap: normal;
  } else {
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $line;
  }
}

// 字符串换行
text-wrap() {
  overflow-wrap: break-word;
  word-break: break-all;
  word-wrap: break-word;
}

// 样式重置
reset($type) {
  if $type == font {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    font-weight: 400;
    color: $color-text-base;
  } else if $type == box-model {
    box-sizing: border-box;
    background-clip: padding-box;
  } else if $type == base {
    reset(font);
    reset(box-model);
    border-radius: 0;
    margin: 0;
    padding: 0;
    outline: none;
    border: none;
    resize: none;
    -webkit-appearance: none;
    appearance: none;
    box-shadow: none;
    color: inherit;
    font: inherit;
    line-height: normal;
    vertical-align: middle;
    background-color: transparent;
    -webkit-user-select: none;
    user-select: none;
    touch-action: manipulation;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  } else if $type == input {
    reset(base);
    line-height: inherit;
    &::placeholder {
      color: $color-text-placeholder;
    }
  }
}

// 禁用状态
disabled() {
  opacity: $opacity-disabled;
  pointer-events: none;
}

// flex 行
flex-row($justify = initial, $align = center) {
  display: flex;
  align-items: $align;
  justify-content: $justify;
}

// flex 列
flex-col($align = initial, $justify = space-between) {
  display: flex;
  flex-direction: column;
  align-items: $align;
  justify-content: $justify;
}

// flex 居中
flex-center($type) {
  display: ($type == inline ? inline-flex : flex);
  align-items: center;
  justify-content: center;
}

// 透明遮罩
transparent-mask() {
  position: relative;
  &:after {
    position: absolute;
    content: '';
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
  }
}

// 大小
size($size) {
  width: $size;
  height: $size;
}

// 边线
scale-hairline-common($color, $top, $right, $bottom, $left) {
  content: '';
  position: absolute;
  background-color: $color;
  display: block;
  z-index: 1;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

h-hairline-base() {
  width: 100%;
  height: 1PX;
  transform: scaleY(0.5);

  @media (min-resolution: 3dppx) {
    transform: scaleY(0.33);
  }
}

v-hairline-base() {
  width: 1PX;
  height: 100%;
  transform: scaleX(0.5);

  @media (min-resolution: 3dppx) {
    transform: scaleX(0.33);
  }
}

hairline($directions = all, $color = $color-line-light, $radius = 0, $type = solid) {
  if $directions == all {
    // all
    border: 1PX $type $color;
    border-radius: $radius;

    :global(html:not([data-scale])) & {
      @media (min-resolution: 2dppx) {
        position: relative unless @position;
        border: none;

        &::before {
          content: '';
          position: absolute;
          left: 0;
          top: 0;
          width: 200%;
          height: 200%;
          border: 1PX $type $color;
          border-radius: $radius * 2;
          transform-origin: 0 0;
          transform: scale(0.5);
          box-sizing: border-box;
          pointer-events: none;
        }
      }
    }
  } else {
    // a list: (top? right? bottom? left?)
    for $direction in $directions {
      border-{$direction}: 1PX $type $color;
    }

    :global(html:not([data-scale])) & {
      @media (min-resolution: 2dppx) {
        position: relative unless @position;
        for $direction in $directions {
          border-{$direction}: none;
        }

        if top in ($directions) {
          &::before {
            scale-hairline-common: $color 0 auto auto 0;
            h-hairline-base: true;
            transform-origin: 50% 50%;
          }
        }

        if bottom in ($directions) {
          &::after {
            scale-hairline-common: $color auto auto 0 0;
            h-hairline-base: true;
            transform-origin: 50% 100%;
          }
        }

        if right in ($directions) {
          &::after {
            scale-hairline-common: $color 0 0 auto auto;
            v-hairline-base: true;
            transform-origin: 100% 50%;
          }
        }

        if left in ($directions) {
          &::after {
            scale-hairline-common: $color auto auto 0 0;
            v-hairline-base: true;
            transform-origin: 100% 50%;
          }
        }
      }
    }
  }
}

hairline-color($color) {
  border-color: $color;
  :global(html:not([data-scale])) & {
    @media (min-resolution: 2dppx) {
      &::before, &::after {
        border-color: $color;
      }
    }
  }
}

hairline-radius($radius) {
  border-radius: $radius;
  :global(html:not([data-scale])) & {
    @media (min-resolution: 2dppx) {
      &::before, &::after {
        border-radius: $radius * 2;
      }
    }
  }
}

hairline-remove($directions = (top right bottom left)) {
  for $direction in $directions {
    border-{$direction}: 0;
  }

  if top in $directions or left in $directions {
    &::before {
      display: none !important;
    }
  } else {
    &::after {
      display: none !important;
    }
  }
}
